

Microchip Technology PIC PRO Macro Assembler V2.00 build -1524193055 
                                                                                               Sat Mar  2 18:20:55 2019

Microchip Technology Omniscient Code Generator v2.00 (PRO mode) build 20180527130849
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	pa_nodes0,global,class=CODE,delta=2
    12                           	dabs	1,0x7E,2
    13  0000                     
    14                           ; Version 2.00
    15                           ; Generated 27/05/2018 GMT
    16                           ; 
    17                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F887 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0007                     	;# 
    56  0008                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  0088                     	;# 
    88  0089                     	;# 
    89  008C                     	;# 
    90  008D                     	;# 
    91  008E                     	;# 
    92  008F                     	;# 
    93  0090                     	;# 
    94  0091                     	;# 
    95  0092                     	;# 
    96  0093                     	;# 
    97  0093                     	;# 
    98  0093                     	;# 
    99  0094                     	;# 
   100  0095                     	;# 
   101  0096                     	;# 
   102  0097                     	;# 
   103  0098                     	;# 
   104  0099                     	;# 
   105  009A                     	;# 
   106  009B                     	;# 
   107  009C                     	;# 
   108  009D                     	;# 
   109  009E                     	;# 
   110  009F                     	;# 
   111  0105                     	;# 
   112  0107                     	;# 
   113  0108                     	;# 
   114  0109                     	;# 
   115  010C                     	;# 
   116  010C                     	;# 
   117  010D                     	;# 
   118  010E                     	;# 
   119  010F                     	;# 
   120  0185                     	;# 
   121  0187                     	;# 
   122  0188                     	;# 
   123  0189                     	;# 
   124  018C                     	;# 
   125  018D                     	;# 
   126  0000                     	;# 
   127  0001                     	;# 
   128  0002                     	;# 
   129  0003                     	;# 
   130  0004                     	;# 
   131  0005                     	;# 
   132  0006                     	;# 
   133  0007                     	;# 
   134  0008                     	;# 
   135  0009                     	;# 
   136  000A                     	;# 
   137  000B                     	;# 
   138  000C                     	;# 
   139  000D                     	;# 
   140  000E                     	;# 
   141  000E                     	;# 
   142  000F                     	;# 
   143  0010                     	;# 
   144  0011                     	;# 
   145  0012                     	;# 
   146  0013                     	;# 
   147  0014                     	;# 
   148  0015                     	;# 
   149  0015                     	;# 
   150  0016                     	;# 
   151  0017                     	;# 
   152  0018                     	;# 
   153  0019                     	;# 
   154  001A                     	;# 
   155  001B                     	;# 
   156  001B                     	;# 
   157  001C                     	;# 
   158  001D                     	;# 
   159  001E                     	;# 
   160  001F                     	;# 
   161  0081                     	;# 
   162  0085                     	;# 
   163  0086                     	;# 
   164  0087                     	;# 
   165  0088                     	;# 
   166  0089                     	;# 
   167  008C                     	;# 
   168  008D                     	;# 
   169  008E                     	;# 
   170  008F                     	;# 
   171  0090                     	;# 
   172  0091                     	;# 
   173  0092                     	;# 
   174  0093                     	;# 
   175  0093                     	;# 
   176  0093                     	;# 
   177  0094                     	;# 
   178  0095                     	;# 
   179  0096                     	;# 
   180  0097                     	;# 
   181  0098                     	;# 
   182  0099                     	;# 
   183  009A                     	;# 
   184  009B                     	;# 
   185  009C                     	;# 
   186  009D                     	;# 
   187  009E                     	;# 
   188  009F                     	;# 
   189  0105                     	;# 
   190  0107                     	;# 
   191  0108                     	;# 
   192  0109                     	;# 
   193  010C                     	;# 
   194  010C                     	;# 
   195  010D                     	;# 
   196  010E                     	;# 
   197  010F                     	;# 
   198  0185                     	;# 
   199  0187                     	;# 
   200  0188                     	;# 
   201  0189                     	;# 
   202  018C                     	;# 
   203  018D                     	;# 
   204  0006                     _PORTBbits	set	6
   205  0086                     _TRISBbits	set	134
   206  0085                     _TRISAbits	set	133
   207  0081                     _OPTION_REGbits	set	129
   208  008F                     _OSCCONbits	set	143
   209  0189                     _ANSELH	set	393
   210  0188                     _ANSEL	set	392
   211                           
   212                           ; #config settings
   213  0000                     
   214                           	psect	cinit
   215  07F7                     start_initialization:	
   216  07F7                     __initialization:	
   217                           
   218                           ; Clear objects allocated to COMMON
   219  07F7  01F0               	clrf	__pbssCOMMON& (0+127)
   220  07F8  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   221  07F9  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   222  07FA  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   223  07FB  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   224  07FC                     end_of_initialization:	
   225                           ;End of C runtime variable initialization code
   226                           
   227  07FC                     __end_of__initialization:	
   228  07FC  0183               	clrf	3
   229  07FD  120A  118A  2FB1   	ljmp	_main	;jump to C main() function
   230                           
   231                           	psect	bssCOMMON
   232  0070                     __pbssCOMMON:	
   233  0070                     TaskButton@cnt:	
   234  0070                     	ds	2
   235  0072                     TaskButton@butsav:	
   236  0072                     	ds	1
   237  0073                     _butevent:	
   238  0073                     	ds	1
   239  0074                     _ledst:	
   240  0074                     	ds	1
   241                           
   242                           	psect	cstackCOMMON
   243  0075                     __pcstackCOMMON:	
   244  0075                     ?_OSCSetup:	
   245  0075                     ??_OSCSetup:	
   246                           ; 1 bytes @ 0x0
   247                           
   248  0075                     ?_TaskLed:	
   249                           ; 1 bytes @ 0x0
   250                           
   251  0075                     ??_TaskLed:	
   252                           ; 1 bytes @ 0x0
   253                           
   254  0075                     ?_TaskButton:	
   255                           ; 1 bytes @ 0x0
   256                           
   257  0075                     ??_TaskButton:	
   258                           ; 1 bytes @ 0x0
   259                           
   260  0075                     ?_main:	
   261                           ; 1 bytes @ 0x0
   262                           
   263  0075                     ??_main:	
   264                           ; 1 bytes @ 0x0
   265                           
   266                           
   267                           ; 1 bytes @ 0x0
   268  0075                     	ds	2
   269                           
   270                           	psect	maintext
   271  07B1                     __pmaintext:	
   272 ;;
   273 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   274 ;;
   275 ;; *************** function _main *****************
   276 ;; Defined at:
   277 ;;		line 48 in file "main.c"
   278 ;; Parameters:    Size  Location     Type
   279 ;;		None
   280 ;; Auto vars:     Size  Location     Type
   281 ;;		None
   282 ;; Return value:  Size  Location     Type
   283 ;;                  1    wreg      void 
   284 ;; Registers used:
   285 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   286 ;; Tracked objects:
   287 ;;		On entry : B00/0
   288 ;;		On exit  : 0/0
   289 ;;		Unchanged: 0/0
   290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   291 ;;      Params:         0       0       0       0       0
   292 ;;      Locals:         0       0       0       0       0
   293 ;;      Temps:          2       0       0       0       0
   294 ;;      Totals:         2       0       0       0       0
   295 ;;Total ram usage:        2 bytes
   296 ;; Hardware stack levels required when called:    1
   297 ;; This function calls:
   298 ;;		_OSCSetup
   299 ;;		_TaskButton
   300 ;;		_TaskLed
   301 ;; This function is called by:
   302 ;;		Startup code after reset
   303 ;; This function uses a non-reentrant model
   304 ;;
   305                           
   306                           
   307                           ;psect for function _main
   308  07B1                     _main:	
   309                           
   310                           ;main.c: 50: OSCSetup();
   311                           
   312                           ;incstack = 0
   313                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   314  07B1  120A  118A  2796  120A  118A  	fcall	_OSCSetup
   315                           
   316                           ;main.c: 51: ANSEL = 0;
   317  07B6  1703               	bsf	3,6	;RP1=1, select bank3
   318  07B7  0188               	clrf	8	;volatile
   319                           
   320                           ;main.c: 52: ANSELH = 0;
   321  07B8  0189               	clrf	9	;volatile
   322                           
   323                           ;main.c: 53: TRISAbits.TRISA0 = 0;
   324  07B9  1303               	bcf	3,6	;RP1=0, select bank1
   325  07BA  1005               	bcf	5,0	;volatile
   326                           
   327                           ;main.c: 54: TRISBbits.TRISB0 = 1;
   328  07BB  1406               	bsf	6,0	;volatile
   329                           
   330                           ;main.c: 55: OPTION_REGbits.nRBPU = 0;
   331  07BC  1381               	bcf	1,7	;volatile
   332                           
   333                           ;main.c: 56: ledst = OFF;
   334  07BD  01F4               	clrf	_ledst
   335  07BE  0AF4               	incf	_ledst,f
   336  07BF                     l780:	
   337                           
   338                           ;main.c: 58: {;main.c: 59: TaskLed();
   339  07BF  120A  118A  279C  120A  118A  	fcall	_TaskLed
   340                           
   341                           ;main.c: 60: TaskButton();
   342  07C4  120A  118A  27D3  120A  118A  	fcall	_TaskButton
   343                           
   344                           ;main.c: 61: _delay((unsigned long)((1)*(8000000/4000.0)));
   345  07C9  3003               	movlw	3
   346  07CA  00F6               	movwf	??_main+1
   347  07CB  3097               	movlw	151
   348  07CC  00F5               	movwf	??_main
   349  07CD                     u77:	
   350  07CD  0BF5               	decfsz	??_main,f
   351  07CE  2FCD               	goto	u77
   352  07CF  0BF6               	decfsz	??_main+1,f
   353  07D0  2FCD               	goto	u77
   354  07D1  2FD2               	nop2
   355  07D2  2FBF               	goto	l780
   356  07D3                     __end_of_main:	
   357                           
   358                           	psect	text1
   359  079C                     __ptext1:	
   360 ;; *************** function _TaskLed *****************
   361 ;; Defined at:
   362 ;;		line 11 in file "main.c"
   363 ;; Parameters:    Size  Location     Type
   364 ;;		None
   365 ;; Auto vars:     Size  Location     Type
   366 ;;		None
   367 ;; Return value:  Size  Location     Type
   368 ;;                  1    wreg      void 
   369 ;; Registers used:
   370 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   371 ;; Tracked objects:
   372 ;;		On entry : 0/100
   373 ;;		On exit  : 0/0
   374 ;;		Unchanged: 0/0
   375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   376 ;;      Params:         0       0       0       0       0
   377 ;;      Locals:         0       0       0       0       0
   378 ;;      Temps:          0       0       0       0       0
   379 ;;      Totals:         0       0       0       0       0
   380 ;;Total ram usage:        0 bytes
   381 ;; Hardware stack levels used:    1
   382 ;; This function calls:
   383 ;;		Nothing
   384 ;; This function is called by:
   385 ;;		_main
   386 ;; This function uses a non-reentrant model
   387 ;;
   388                           
   389                           
   390                           ;psect for function _TaskLed
   391  079C                     _TaskLed:	
   392                           
   393                           ;main.c: 13: switch(ledst)
   394                           
   395                           ;incstack = 0
   396                           ; Regs used in _TaskLed: [wreg-fsr0h+status,2+status,0]
   397  079C  2FA8               	goto	l750
   398  079D                     l738:	
   399                           
   400                           ;main.c: 16: if(butevent == 1)
   401  079D  0B73               	decfsz	_butevent,w
   402  079E  0008               	return
   403                           
   404                           ;main.c: 17: {;main.c: 18: ledst = ON;
   405  079F  01F4               	clrf	_ledst
   406                           
   407                           ;main.c: 19: butevent = 0;
   408  07A0  01F3               	clrf	_butevent
   409  07A1  0008               	return
   410  07A2                     l742:	
   411                           
   412                           ;main.c: 23: if(butevent == 1)
   413  07A2  0B73               	decfsz	_butevent,w
   414  07A3  0008               	return
   415                           
   416                           ;main.c: 24: {;main.c: 25: ledst = OFF;
   417  07A4  01F4               	clrf	_ledst
   418  07A5  0AF4               	incf	_ledst,f
   419                           
   420                           ;main.c: 26: butevent = 0;
   421  07A6  01F3               	clrf	_butevent
   422  07A7  0008               	return
   423  07A8                     l750:	
   424  07A8  0874               	movf	_ledst,w
   425                           
   426                           ; Switch size 1, requested type "space"
   427                           ; Number of cases is 2, Range of values is 0 to 1
   428                           ; switch strategies available:
   429                           ; Name         Instructions Cycles
   430                           ; simple_byte            7     4 (average)
   431                           ; direct_byte           14     8 (fixed)
   432                           ; jumptable            260     6 (fixed)
   433                           ;	Chosen strategy is simple_byte
   434  07A9  3A00               	xorlw	0	; case 0
   435  07AA  1903               	skipnz
   436  07AB  2FA2               	goto	l742
   437  07AC  3A01               	xorlw	1	; case 1
   438  07AD  1903               	skipnz
   439  07AE  2F9D               	goto	l738
   440  07AF  2FB0               	goto	l142
   441  07B0                     l142:	
   442  07B0  0008               	return
   443  07B1                     __end_of_TaskLed:	
   444                           
   445                           	psect	text2
   446  07D3                     __ptext2:	
   447 ;; *************** function _TaskButton *****************
   448 ;; Defined at:
   449 ;;		line 31 in file "main.c"
   450 ;; Parameters:    Size  Location     Type
   451 ;;		None
   452 ;; Auto vars:     Size  Location     Type
   453 ;;		None
   454 ;; Return value:  Size  Location     Type
   455 ;;                  1    wreg      void 
   456 ;; Registers used:
   457 ;;		wreg, status,2, status,0, btemp+1
   458 ;; Tracked objects:
   459 ;;		On entry : 0/100
   460 ;;		On exit  : 0/0
   461 ;;		Unchanged: 0/0
   462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   463 ;;      Params:         0       0       0       0       0
   464 ;;      Locals:         0       0       0       0       0
   465 ;;      Temps:          0       0       0       0       0
   466 ;;      Totals:         0       0       0       0       0
   467 ;;Total ram usage:        0 bytes
   468 ;; Hardware stack levels used:    1
   469 ;; This function calls:
   470 ;;		Nothing
   471 ;; This function is called by:
   472 ;;		_main
   473 ;; This function uses a non-reentrant model
   474 ;;
   475                           
   476                           
   477                           ;psect for function _TaskButton
   478  07D3                     _TaskButton:	
   479                           
   480                           ;main.c: 33: static char butsav = 0;;main.c: 34: static int cnt = 0;;main.c: 35: if(buts
      +                          av != PORTBbits.RB0)
   481                           
   482                           ;incstack = 0
   483                           ; Regs used in _TaskButton: [wreg+status,2+status,0+btemp+1]
   484  07D3  1283               	bcf	3,5	;RP0=0, select bank0
   485  07D4  1303               	bcf	3,6	;RP1=0, select bank0
   486  07D5  0806               	movf	6,w	;volatile
   487  07D6  3901               	andlw	1
   488  07D7  0672               	xorwf	TaskButton@butsav,w
   489  07D8  1903               	skipnz
   490  07D9  2FF4               	goto	l764
   491                           
   492                           ;main.c: 36: {;main.c: 37: cnt ++;
   493  07DA  0AF0               	incf	TaskButton@cnt,f
   494  07DB  1903               	skipnz
   495  07DC  0AF1               	incf	TaskButton@cnt+1,f
   496                           
   497                           ;main.c: 38: if(cnt > 1000)
   498  07DD  0871               	movf	TaskButton@cnt+1,w
   499  07DE  3A80               	xorlw	128
   500  07DF  00FF               	movwf	127
   501  07E0  3083               	movlw	131
   502  07E1  027F               	subwf	127,w
   503  07E2  1D03               	skipz
   504  07E3  2FE6               	goto	u55
   505  07E4  30E9               	movlw	233
   506  07E5  0270               	subwf	TaskButton@cnt,w
   507  07E6                     u55:	
   508  07E6  1C03               	skipc
   509  07E7  0008               	return
   510                           
   511                           ;main.c: 39: {;main.c: 40: butsav = PORTBbits.RB0;
   512  07E8  3000               	movlw	0
   513  07E9  1283               	bcf	3,5	;RP0=0, select bank0
   514  07EA  1303               	bcf	3,6	;RP1=0, select bank0
   515  07EB  1806               	btfsc	6,0	;volatile
   516  07EC  3001               	movlw	1
   517  07ED  00F2               	movwf	TaskButton@butsav
   518                           
   519                           ;main.c: 41: if(butsav == 0) butevent = 1;
   520  07EE  0872               	movf	TaskButton@butsav,w
   521  07EF  1D03               	btfss	3,2
   522  07F0  0008               	return
   523  07F1  01F3               	clrf	_butevent
   524  07F2  0AF3               	incf	_butevent,f
   525  07F3  0008               	return
   526  07F4                     l764:	
   527                           
   528                           ;main.c: 45: else cnt = 0;
   529  07F4  01F0               	clrf	TaskButton@cnt
   530  07F5  01F1               	clrf	TaskButton@cnt+1
   531  07F6  0008               	return
   532  07F7                     __end_of_TaskButton:	
   533                           
   534                           	psect	text3
   535  0796                     __ptext3:	
   536 ;; *************** function _OSCSetup *****************
   537 ;; Defined at:
   538 ;;		line 10 in file "peripheral.c"
   539 ;; Parameters:    Size  Location     Type
   540 ;;		None
   541 ;; Auto vars:     Size  Location     Type
   542 ;;		None
   543 ;; Return value:  Size  Location     Type
   544 ;;                  1    wreg      void 
   545 ;; Registers used:
   546 ;;		wreg, status,2, status,0
   547 ;; Tracked objects:
   548 ;;		On entry : B00/0
   549 ;;		On exit  : B00/100
   550 ;;		Unchanged: 800/0
   551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   552 ;;      Params:         0       0       0       0       0
   553 ;;      Locals:         0       0       0       0       0
   554 ;;      Temps:          0       0       0       0       0
   555 ;;      Totals:         0       0       0       0       0
   556 ;;Total ram usage:        0 bytes
   557 ;; Hardware stack levels used:    1
   558 ;; This function calls:
   559 ;;		Nothing
   560 ;; This function is called by:
   561 ;;		_main
   562 ;; This function uses a non-reentrant model
   563 ;;
   564                           
   565                           
   566                           ;psect for function _OSCSetup
   567  0796                     _OSCSetup:	
   568                           
   569                           ;peripheral.c: 13: OSCCONbits.IRCF = 7;
   570                           
   571                           ;incstack = 0
   572                           ; Regs used in _OSCSetup: [wreg+status,2+status,0]
   573  0796  3070               	movlw	112
   574  0797  1683               	bsf	3,5	;RP0=1, select bank1
   575  0798  048F               	iorwf	15,f	;volatile
   576  0799                     l67:	
   577                           ;peripheral.c: 34: while(!OSCCONbits.HTS);
   578                           
   579  0799  190F               	btfsc	15,2	;volatile
   580  079A  0008               	return
   581  079B  2F99               	goto	l67
   582  079C                     __end_of_OSCSetup:	
   583  007E                     btemp	set	126	;btemp
   584  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      2       7
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0       0
                                              0 COMMON     2     2      0
                           _OSCSetup
                         _TaskButton
                            _TaskLed
 ---------------------------------------------------------------------------------
 (1) _TaskLed                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TaskButton                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OSCSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OSCSetup
   _TaskButton
   _TaskLed

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      2       7       1       50.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       7       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       7      12        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sat Mar  2 18:20:55 2019

                      l67 0799                        u55 07E6                        u77 07CD  
                     l142 07B0                       l742 07A2                       l750 07A8  
                     l738 079D                       l764 07F4                       l780 07BF  
            __CFG_LVP$OFF 0000                      _main 07B1                      btemp 007E  
                    start 0000           __end_of_TaskLed 07B1                     ?_main 0075  
           __CFG_WDTE$OFF 0000                     _ANSEL 0188          __end_of_OSCSetup 079C  
                   _ledst 0074                     status 0003                     wtemp0 007E  
         __initialization 07F7              __end_of_main 07D3                    ??_main 0075  
                  _ANSELH 0189             TaskButton@cnt 0070                _TaskButton 07D3  
               ??_TaskLed 0075   __end_of__initialization 07FC            __pcstackCOMMON 0075  
               ?_OSCSetup 0075            _OPTION_REGbits 0081               ?_TaskButton 0075  
              __pmaintext 07B1                ??_OSCSetup 0075                   _TaskLed 079C  
                 __ptext1 079C                   __ptext2 07D3                   __ptext3 0796  
     __size_of_TaskButton 0024          TaskButton@butsav 0072      end_of_initialization 07FC  
               _PORTBbits 0006                 _TRISAbits 0085                 _TRISBbits 0086  
       __size_of_OSCSetup 0006       start_initialization 07F7              ??_TaskButton 0075  
__CFG_FOSC$INTRC_NOCLKOUT 0000        __end_of_TaskButton 07F7               __pbssCOMMON 0070  
               ___latbits 0002                  ?_TaskLed 0075                  _OSCSetup 0796  
        __size_of_TaskLed 0015                  _butevent 0073             __size_of_main 0022  
              _OSCCONbits 008F  
